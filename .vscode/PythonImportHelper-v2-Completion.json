[
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "site",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "site",
        "description": "site",
        "detail": "site",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "context",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "sqlalchemy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "engine_from_config",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "pool",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "fileConfig",
        "importPath": "logging.config",
        "description": "logging.config",
        "isExtraImport": true,
        "detail": "logging.config",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "shared.database",
        "description": "shared.database",
        "isExtraImport": true,
        "detail": "shared.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "shared.database",
        "description": "shared.database",
        "isExtraImport": true,
        "detail": "shared.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "shared.database",
        "description": "shared.database",
        "isExtraImport": true,
        "detail": "shared.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "shared.database",
        "description": "shared.database",
        "isExtraImport": true,
        "detail": "shared.database",
        "documentation": {}
    },
    {
        "label": "SessionLocal",
        "importPath": "shared.database",
        "description": "shared.database",
        "isExtraImport": true,
        "detail": "shared.database",
        "documentation": {}
    },
    {
        "label": "Aluno",
        "importPath": "escola.models.aluno",
        "description": "escola.models.aluno",
        "isExtraImport": true,
        "detail": "escola.models.aluno",
        "documentation": {}
    },
    {
        "label": "Aluno",
        "importPath": "escola.models.aluno",
        "description": "escola.models.aluno",
        "isExtraImport": true,
        "detail": "escola.models.aluno",
        "documentation": {}
    },
    {
        "label": "Turma",
        "importPath": "escola.models.turma",
        "description": "escola.models.turma",
        "isExtraImport": true,
        "detail": "escola.models.turma",
        "documentation": {}
    },
    {
        "label": "Turma",
        "importPath": "escola.models.turma",
        "description": "escola.models.turma",
        "isExtraImport": true,
        "detail": "escola.models.turma",
        "documentation": {}
    },
    {
        "label": "Professor",
        "importPath": "escola.models.professor",
        "description": "escola.models.professor",
        "isExtraImport": true,
        "detail": "escola.models.professor",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "sessionmaker",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "AlunoRequest",
        "importPath": "escola.schemas.aluno_schema",
        "description": "escola.schemas.aluno_schema",
        "isExtraImport": true,
        "detail": "escola.schemas.aluno_schema",
        "documentation": {}
    },
    {
        "label": "AlunoResponse",
        "importPath": "escola.schemas.aluno_schema",
        "description": "escola.schemas.aluno_schema",
        "isExtraImport": true,
        "detail": "escola.schemas.aluno_schema",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "shared.dependencies",
        "description": "shared.dependencies",
        "isExtraImport": true,
        "detail": "shared.dependencies",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "shared.dependencies",
        "description": "shared.dependencies",
        "isExtraImport": true,
        "detail": "shared.dependencies",
        "documentation": {}
    },
    {
        "label": "NotFound",
        "importPath": "shared.exceptions",
        "description": "shared.exceptions",
        "isExtraImport": true,
        "detail": "shared.exceptions",
        "documentation": {}
    },
    {
        "label": "NotFound",
        "importPath": "shared.exceptions",
        "description": "shared.exceptions",
        "isExtraImport": true,
        "detail": "shared.exceptions",
        "documentation": {}
    },
    {
        "label": "NotFound",
        "importPath": "shared.exceptions",
        "description": "shared.exceptions",
        "isExtraImport": true,
        "detail": "shared.exceptions",
        "documentation": {}
    },
    {
        "label": "NotFound",
        "importPath": "shared.exceptions",
        "description": "shared.exceptions",
        "isExtraImport": true,
        "detail": "shared.exceptions",
        "documentation": {}
    },
    {
        "label": "TurmaRequest",
        "importPath": "escola.schemas.turma_schema",
        "description": "escola.schemas.turma_schema",
        "isExtraImport": true,
        "detail": "escola.schemas.turma_schema",
        "documentation": {}
    },
    {
        "label": "TurmaResponse",
        "importPath": "escola.schemas.turma_schema",
        "description": "escola.schemas.turma_schema",
        "isExtraImport": true,
        "detail": "escola.schemas.turma_schema",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "declarative_base",
        "importPath": "sqlalchemy.ext.declarative",
        "description": "sqlalchemy.ext.declarative",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.declarative",
        "documentation": {}
    },
    {
        "label": "JSONResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "aluno_router",
        "importPath": "escola.routers",
        "description": "escola.routers",
        "isExtraImport": true,
        "detail": "escola.routers",
        "documentation": {}
    },
    {
        "label": "not_found_handler",
        "importPath": "shared.exceptions_handle",
        "description": "shared.exceptions_handle",
        "isExtraImport": true,
        "detail": "shared.exceptions_handle",
        "documentation": {}
    },
    {
        "label": "bin_dir",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "bin_dir = os.path.dirname(abs_file)\nbase = bin_dir[: -len(\"bin\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.10/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "base",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "base = bin_dir[: -len(\"bin\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.10/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"PATH\"]",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "os.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.10/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV\"]",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.10/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV_PROMPT\"]",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.10/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "prev_length",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "prev_length = len(sys.path)\nfor lib in \"../lib/python3.10/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.path[:]",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "sys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.real_prefix",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "sys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.prefix",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "sys.prefix = base",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "alembic.versions.174df0c206d0_criar_tabela_turmas",
        "description": "alembic.versions.174df0c206d0_criar_tabela_turmas",
        "peekOfCode": "def upgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('turmas',\n    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),\n    sa.Column('serie', sa.String(length=30), nullable=True),\n    sa.Column('codigo', sa.String(length=30), nullable=True),\n    sa.PrimaryKeyConstraint('id')\n    )\n    # ### end Alembic commands ###\ndef downgrade() -> None:",
        "detail": "alembic.versions.174df0c206d0_criar_tabela_turmas",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "alembic.versions.174df0c206d0_criar_tabela_turmas",
        "description": "alembic.versions.174df0c206d0_criar_tabela_turmas",
        "peekOfCode": "def downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_table('turmas')\n    # ### end Alembic commands ###",
        "detail": "alembic.versions.174df0c206d0_criar_tabela_turmas",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "alembic.versions.5c33366b573f_criar_tabela_professores",
        "description": "alembic.versions.5c33366b573f_criar_tabela_professores",
        "peekOfCode": "def upgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('professores',\n    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),\n    sa.Column('nome', sa.String(length=50), nullable=True),\n    sa.Column('cpf', sa.String(length=30), nullable=True),\n    sa.Column('rg', sa.String(length=30), nullable=True),\n    sa.PrimaryKeyConstraint('id')\n    )\n    # ### end Alembic commands ###",
        "detail": "alembic.versions.5c33366b573f_criar_tabela_professores",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "alembic.versions.5c33366b573f_criar_tabela_professores",
        "description": "alembic.versions.5c33366b573f_criar_tabela_professores",
        "peekOfCode": "def downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_table('professores')\n    # ### end Alembic commands ###",
        "detail": "alembic.versions.5c33366b573f_criar_tabela_professores",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "alembic.versions.6f63cb369267_criar_tabela_alunos",
        "description": "alembic.versions.6f63cb369267_criar_tabela_alunos",
        "peekOfCode": "def upgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('alunos',\n    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),\n    sa.Column('nome', sa.String(length=30), nullable=True),\n    sa.Column('cpf', sa.String(length=50), nullable=True),\n    sa.Column('rg', sa.String(length=50), nullable=True),\n    sa.PrimaryKeyConstraint('id')\n    )\n    # ### end Alembic commands ###",
        "detail": "alembic.versions.6f63cb369267_criar_tabela_alunos",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "alembic.versions.6f63cb369267_criar_tabela_alunos",
        "description": "alembic.versions.6f63cb369267_criar_tabela_alunos",
        "peekOfCode": "def downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_table('alunos')\n    # ### end Alembic commands ###",
        "detail": "alembic.versions.6f63cb369267_criar_tabela_alunos",
        "documentation": {}
    },
    {
        "label": "run_migrations_offline",
        "kind": 2,
        "importPath": "alembic.env",
        "description": "alembic.env",
        "peekOfCode": "def run_migrations_offline() -> None:\n    \"\"\"Run migrations in 'offline' mode.\n    This configures the context with just a URL\n    and not an Engine, though an Engine is acceptable\n    here as well.  By skipping the Engine creation\n    we don't even need a DBAPI to be available.\n    Calls to context.execute() here emit the given string to the\n    script output.\n    \"\"\"\n    url = config.get_main_option(\"sqlalchemy.url\")",
        "detail": "alembic.env",
        "documentation": {}
    },
    {
        "label": "run_migrations_online",
        "kind": 2,
        "importPath": "alembic.env",
        "description": "alembic.env",
        "peekOfCode": "def run_migrations_online() -> None:\n    \"\"\"Run migrations in 'online' mode.\n    In this scenario we need to create an Engine\n    and associate a connection with the context.\n    \"\"\"\n    connectable = engine_from_config(\n        config.get_section(config.config_ini_section, {}),\n        prefix=\"sqlalchemy.\",\n        poolclass=pool.NullPool,\n    )",
        "detail": "alembic.env",
        "documentation": {}
    },
    {
        "label": "config",
        "kind": 5,
        "importPath": "alembic.env",
        "description": "alembic.env",
        "peekOfCode": "config = context.config\n# Interpret the config file for Python logging.\n# This line sets up loggers basically.\nif config.config_file_name is not None:\n    fileConfig(config.config_file_name)\n# add your model's MetaData object here\n# for 'autogenerate' support\n# from myapp import mymodel\n# target_metadata = mymodel.Base.metadata\ntarget_metadata = Base.metadata",
        "detail": "alembic.env",
        "documentation": {}
    },
    {
        "label": "target_metadata",
        "kind": 5,
        "importPath": "alembic.env",
        "description": "alembic.env",
        "peekOfCode": "target_metadata = Base.metadata\n# other values from the config, defined by the needs of env.py,\n# can be acquired:\n# my_important_option = config.get_main_option(\"my_important_option\")\n# ... etc.\ndef run_migrations_offline() -> None:\n    \"\"\"Run migrations in 'offline' mode.\n    This configures the context with just a URL\n    and not an Engine, though an Engine is acceptable\n    here as well.  By skipping the Engine creation",
        "detail": "alembic.env",
        "documentation": {}
    },
    {
        "label": "Aluno",
        "kind": 6,
        "importPath": "escola.models.aluno",
        "description": "escola.models.aluno",
        "peekOfCode": "class Aluno(Base):\n    __tablename__ = \"alunos\"\n    id = Column(Integer, primary_key=True, autoincrement=True)\n    nome = Column(String(30))\n    cpf = Column(String(50))\n    rg = Column(String(50))",
        "detail": "escola.models.aluno",
        "documentation": {}
    },
    {
        "label": "Professor",
        "kind": 6,
        "importPath": "escola.models.professor",
        "description": "escola.models.professor",
        "peekOfCode": "class Professor(Base):\n    __tablename__ = \"professores\"\n    id = Column(Integer, primary_key=True, autoincrement=True)\n    nome = Column(String(50))\n    cpf = Column(String(30))\n    rg = Column(String(30))\n    # Campo de turmas",
        "detail": "escola.models.professor",
        "documentation": {}
    },
    {
        "label": "Turma",
        "kind": 6,
        "importPath": "escola.models.turma",
        "description": "escola.models.turma",
        "peekOfCode": "class Turma(Base):\n    __tablename__ = \"turmas\"\n    id = Column(Integer, primary_key=True, autoincrement=True)\n    serie = Column(String(30))\n    codigo = Column(String(30))",
        "detail": "escola.models.turma",
        "documentation": {}
    },
    {
        "label": "buscar_aluno_por_id",
        "kind": 2,
        "importPath": "escola.routers.aluno_router",
        "description": "escola.routers.aluno_router",
        "peekOfCode": "def buscar_aluno_por_id(id:int, db:Session) -> Aluno:\n    aluno = db.query(Aluno).get(id)\n    if aluno is None:\n        raise NotFound(\"Aluno(a) não encontrado(a)\")\n    return aluno",
        "detail": "escola.routers.aluno_router",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "escola.routers.aluno_router",
        "description": "escola.routers.aluno_router",
        "peekOfCode": "router = APIRouter(prefix=\"/escola\")\n@router.get(\"/\", response_model=List[AlunoResponse], status_code=200)\nasync def get_alunos(db: Session=Depends(get_db)) -> List[AlunoResponse]:\n    return db.query(Aluno).all()\n@router.get(\"/{id_aluno}\", response_model=AlunoResponse, status_code=200)\nasync def get_aluno(id_aluno:int, db:Session=Depends(get_db)) -> AlunoResponse:\n    aluno = buscar_aluno_por_id(id_aluno, db)\n    return aluno\n@router.post(\"\", response_model=AlunoResponse, status_code=201)\nasync def criar_aluno(aluno_request:AlunoRequest, db:Session=Depends(get_db)) -> AlunoResponse:",
        "detail": "escola.routers.aluno_router",
        "documentation": {}
    },
    {
        "label": "buscar_turmar_por_id",
        "kind": 2,
        "importPath": "escola.routers.turma_router",
        "description": "escola.routers.turma_router",
        "peekOfCode": "def buscar_turmar_por_id(id:int, db:Session) -> Turma:\n    turma = db.query(Turma).get(id)\n    if turma is None:\n        raise NotFound(\"Turma não encotrada\")\n    return turma",
        "detail": "escola.routers.turma_router",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "escola.routers.turma_router",
        "description": "escola.routers.turma_router",
        "peekOfCode": "router = APIRouter(prefix=\"/escola\")\n@router.get(\"/\", response_model=List[TurmaResponse], status_code=200)\nasync def get_turmas(db: Session=Depends(get_db)) -> List[TurmaResponse]:\n    return db.query(Turma).all()\n@router.get(\"/{id_turma}\", response_model=TurmaResponse, status_code=200)\nasync def get_turma(id_turma:int, db:Session=Depends(get_db)) -> TurmaResponse:\n    turma = buscar_turmar_por_id(id_turma, db)\n    return turma\n@router.post(\"\", response_model=TurmaResponse, status_code=201)\nasync def criar_turma(turma_request:TurmaRequest, db:Session=Depends(get_db)) -> TurmaResponse:",
        "detail": "escola.routers.turma_router",
        "documentation": {}
    },
    {
        "label": "AlunoResponse",
        "kind": 6,
        "importPath": "escola.schemas.aluno_schema",
        "description": "escola.schemas.aluno_schema",
        "peekOfCode": "class AlunoResponse(BaseModel):\n    id: int\n    nome: str\n    cpf: str\n    rg: str\n    class Config:\n        from_attributes = True\nclass AlunoRequest(BaseModel):\n    nome: str\n    cpf: str",
        "detail": "escola.schemas.aluno_schema",
        "documentation": {}
    },
    {
        "label": "AlunoRequest",
        "kind": 6,
        "importPath": "escola.schemas.aluno_schema",
        "description": "escola.schemas.aluno_schema",
        "peekOfCode": "class AlunoRequest(BaseModel):\n    nome: str\n    cpf: str\n    rg: str",
        "detail": "escola.schemas.aluno_schema",
        "documentation": {}
    },
    {
        "label": "ProfessorResponse",
        "kind": 6,
        "importPath": "escola.schemas.professor_schema",
        "description": "escola.schemas.professor_schema",
        "peekOfCode": "class ProfessorResponse(BaseModel):\n    id: int\n    nome: str\n    cpf: str\n    rg: str\n    class Config:\n        from_attributes = True\nclass ProfessorRequest(BaseModel):\n    nome: str\n    cpf: str",
        "detail": "escola.schemas.professor_schema",
        "documentation": {}
    },
    {
        "label": "ProfessorRequest",
        "kind": 6,
        "importPath": "escola.schemas.professor_schema",
        "description": "escola.schemas.professor_schema",
        "peekOfCode": "class ProfessorRequest(BaseModel):\n    nome: str\n    cpf: str\n    rg: str",
        "detail": "escola.schemas.professor_schema",
        "documentation": {}
    },
    {
        "label": "TurmaResponse",
        "kind": 6,
        "importPath": "escola.schemas.turma_schema",
        "description": "escola.schemas.turma_schema",
        "peekOfCode": "class TurmaResponse(BaseModel):\n    id: int\n    serie: str\n    codigo: str\n    class Config:\n        from_attributes = True\nclass TurmaRequest(BaseModel):\n    serie: str\n    codigo: str",
        "detail": "escola.schemas.turma_schema",
        "documentation": {}
    },
    {
        "label": "TurmaRequest",
        "kind": 6,
        "importPath": "escola.schemas.turma_schema",
        "description": "escola.schemas.turma_schema",
        "peekOfCode": "class TurmaRequest(BaseModel):\n    serie: str\n    codigo: str",
        "detail": "escola.schemas.turma_schema",
        "documentation": {}
    },
    {
        "label": "SQLALCHEMY_DATA_BASE_URL",
        "kind": 5,
        "importPath": "shared.database",
        "description": "shared.database",
        "peekOfCode": "SQLALCHEMY_DATA_BASE_URL = \"postgresql://postgres:senha123@localhost/escola_db\"\nengine = create_engine(SQLALCHEMY_DATA_BASE_URL)\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\nBase = declarative_base()",
        "detail": "shared.database",
        "documentation": {}
    },
    {
        "label": "engine",
        "kind": 5,
        "importPath": "shared.database",
        "description": "shared.database",
        "peekOfCode": "engine = create_engine(SQLALCHEMY_DATA_BASE_URL)\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\nBase = declarative_base()",
        "detail": "shared.database",
        "documentation": {}
    },
    {
        "label": "SessionLocal",
        "kind": 5,
        "importPath": "shared.database",
        "description": "shared.database",
        "peekOfCode": "SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\nBase = declarative_base()",
        "detail": "shared.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 5,
        "importPath": "shared.database",
        "description": "shared.database",
        "peekOfCode": "Base = declarative_base()",
        "detail": "shared.database",
        "documentation": {}
    },
    {
        "label": "get_db",
        "kind": 2,
        "importPath": "shared.dependencies",
        "description": "shared.dependencies",
        "peekOfCode": "def get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()",
        "detail": "shared.dependencies",
        "documentation": {}
    },
    {
        "label": "NotFound",
        "kind": 6,
        "importPath": "shared.exceptions",
        "description": "shared.exceptions",
        "peekOfCode": "class NotFound(Exception):\n    def __init__(self, name:str):\n        self.name = name",
        "detail": "shared.exceptions",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "app = FastAPI()\n@app.get(\"/\")\nasync def root():\n    return \"Olá Mundo\"\napp.include_router(aluno_router.router)\napp.add_exception_handler(NotFound, not_found_handler)",
        "detail": "main",
        "documentation": {}
    }
]